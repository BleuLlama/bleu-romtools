----------------------------
Sun Mar  2 15:20:59 EST 2008

    gui app:
	driver:
		driver FILE.INI
		or
		driver name + driver dir
		or
		driver name + ENV driver dir

	rom:
		inf ROM + rom DIR + files

	pcx:
		inf PCX + PCX DIR

	autoload if:
		driver + rom
		driver + pcx

	Save:
		Save to input file format
		Export to PCX / ROMs

	
	on startup: if able to autoload, do it.
	then req "Autoloaded DRIVERNAME"  < Ok >


	Need:
		Bank Selector
		req "Select new Bank:"
			< mspacbl Bank 0: 8x8 (name) >
			< mspacbl Bank 1: 16x16 (name) >
			< mspacbl Bank 2: 16x16 (name) >
			< mspacbl Bank 3: 16x16 (name) >

		sprite selector
		right panel has a Sprite mode 
			left/right select new sprite
			up/down adds/subtracts 0x08 (?)
			[] changes to alike bank
			{} changes to any bank


----------------------------
Sun Feb 24 22:08:27 EST 2008

    Updating it all to be "Scott Lawrence" instead of "Jerry Carpenter"
    Migrating source repository to Google Code


----------------------------
Fri May 30 23:11:26 EDT 2003

    Fixed bug 15 (5 color photoshop fix)

    First, I fixed it, not realizing that I had fixed it for
    non-paletted images. (code untested), then I figured out how
    to do it for the standard palatted PCX images.

    I put in a note in case that untested code ever gets reached,
    although I doubt it ever will.. heh.

    Regardless, the bug is fixed.  It's very happy code now. :D

    Version bumped to 0.8



----------------------------
Thu May 29 17:58:55 EDT 2003

    Temporary workaround for the 5 color photoshop PCX files:
	convert -colors 4 badfile.pcx goodfile.pcx
    (using Image Magick)



----------------------------
Thu May 29 17:31:34 EDT 2003

    Tilemap importer completed.  I had to hack around to get it to
    work, due to a flaw in my design. Blah.  I'll get it right next
    time.

    Bugs 14 and 15 added.

    Photoshop generates PCX files with multiple "black"s.  I need to
    make my loader more tolerant to this.

    If there are no roms around, it should start with a zeroed buffer,
    rather than just bailing and failing.



----------------------------
Thu May 29 00:54:50 EDT 2003

    Tilemap exporter completed.  No checkerboard file yet.



----------------------------
Mon May 19 19:46:22 EDT 2003

    When you export tilemaps to image files, there should also be
    checkerboard files with those as well.



----------------------------
Wed May 14 22:41:13 EDT 2003

    herringbone doojobby done too.
    


----------------------------
Wed May 14 21:27:31 EDT 2003

    tilemap_SetContains() done



----------------------------
Wed May 14 16:34:50 EDT 2003

    Tilemap ToDo:
	x driver layout
	x params
	X params check X
	x change the bank import/export function to use:
	    x spriteNumber to startoffset compute method
	    x decode single sprite into image
	- if tilemap support, export tilemaps() (in current export)
	    - tilemap decode()
		- create IMAGE of correct size
		- foreach row, draw sprite()s or draw blank()s
	- if tilemap support, import tilemaps() (in current import)
	    - tilemap encode()
		- foreach row, decode sprite if not blank.



----------------------------
Wed May 14 12:08:27 EDT 2003

    I think I might re-strucrure this after 0.8 is out, and re-write it
    for C++.  



----------------------------
Mon May 12 22:51:44 EDT 2003

    Warning: Mayostard may expire before Mustardayonaise

    Changed the checkerboard rendering to draw out four digits for
    16x16.

    If it hits >9999, it changes to green.  It doesn't change back
    though... if the user finds a bank with 10,000 sprites in it,
    I think they will have other problems.

    8x8 still does the dotted/colored text.



----------------------------
Sun May  4 14:57:28 CDT 2003

    - driver support for tilemaps is done. (load, free, dump) 
    - added the "TileMaps Explained" section into the doc.  PHEW!
    - added in 'fname' into the driver.

    Current Function todo:
	- tilemap_SetContains( ti, sprite Number )
	    if the sprite number is in one of the specified tilemaps, 
	    return 1
	- tilemap_Save( ti, tm# )	save out the single tilemap
	- tilemap_Load( ti, tm# )	load in the single tilemap



----------------------------
Fri May  2 14:09:54 PDT 2003

    - (hopefully) finished the sprite (en/de)code

    - Improved checkerboard file
	- centers the lettering in the sprite if > 8x8
	- changes colors after 1000 to green
	- uses its own palette now (below)



----------------------------
Thu May  1 11:56:45 PDT 2003

    - use a different palette for the checkerboard file
	- black, white, red, green



----------------------------
Tue Apr 29 15:14:25 EDT 2003

    Started implementing the (De/En)codeSprite functions while on a plane.



----------------------------
Sun Apr 27 18:54:15 EDT 2003

    Tilemap ToDo:
	x driver layout
	x params
	- params check
	x change the bank import/export function to use:
	    x spriteNumber to startoffset compute method
	    x decode single sprite into image
	- if tilemap support, export tilemaps() (in current export)
	    - tilemap decode()
		- create IMAGE of correct size
		- foreach row, draw sprite()s or draw blank()s
	- if tilemap support, import tilemaps() (in current import)
	    - tilemap encode()
		- foreach row, decode sprite if not blank.



----------------------------
Sun Apr 27 18:10:56 EDT 2003

    Tilemap Policies:

	- The last loaded sprite/graphic wins.  
		(last loaded = lower/right)

	- Index number <0 in the tilemap info denotes no real sprite.

	- You import and export a "tilemap set", including
		- core bank graphics (hashed out used sprites)
		- tilemap images as defined (in the order of precidence)

    Params check: (params_VerifyDriver)
	if -tms non-null, check it for validity
	if cross-bank spanning -> invalid!
	if non-valid, display all valid sets

    Exporting a tilemap:
	export the core bank graphics
	    - if tilemap is defined 
		and sprite is in a tilemap for this set,
		-> fill sprite with predefined pattern pattern

	export each tilemap image
	    - generate file of size defined in the TilemapN entry
	    - foreach row
		foreach element
		    draw that sprite to the tilemap image 
		inc to the next row

    Importing a tilemap:
	import the core bank graphics
	    - just load the whole thing in.

	import each tilemap image
	    - foreach row
		foreach element
		    decode that sprite into the rom space
		inc to the next row

    * need a function to say "i'm at sprite X, where is the start
      pos in the rom?)



----------------------------
Sun Apr 27 17:44:14 EDT 2003

    Fixed Bug 03 (bounds check fix)

    Okay.  I just put my finger on the issue with importing and
    exporting tilemaps/banks.

    Lets say you have one driver file for all of the variants of
    pac-man.  Each of them has different tilemaps, using sprites
    that overlay eachother.

    Now say you export a bank, along with two tilemaps that overlay
    eachother, you edit one, you edit the other, then you import
    it.  What happens to the overlapping sprites?

    Should it be a:
	import the game sprites
	overlay tilemap image 1
	overlay tilemap image 2
	etc.

    Should i require each "game" to really be in its own driver?
    That seems excessive.



----------------------------
Sun Apr 20 15:34:11 EDT 2003

    Current ToDo:
	- Tilemaps (see 2003-04-12 below)
	- overlay 3x6 font on graphic



----------------------------
Thu Apr 17 11:20:57 EDT 2003

    Fixed the -rod bug (BUG 13)
    Added a check in params.c to see if directories exist.
    Slightly changed the ordering of the dots for the checkerboard file.



----------------------------
Thu Apr 17 11:20:57 EDT 2003
    
    Just added a 3x6 font for the checkerboard file, and updated the
    checkerboard code appropriately.



----------------------------
Tue Apr 15 10:31:32 EDT 2003

    Just sent off 0.7c to dletter@yahoo.com to work on a DOS port.
    YAY!  I wonder what's going to be needed to be changed to get 
    it working...



----------------------------
Sat Apr 12 16:30:40 EDT 2003

    Just released DOS 0.7b to the Yahoo Group for testing.  Once
    people are happy with it, I'll move on.

    (BUG 12) Make the ini loader's keys and headers case insensitive.

    Tilemap To Do: (for 0.8)

	- Add example tilemaps in to inidriv.txt
	- Add in structures/mechanisms to hold the tilemaps in the driver
	- Create tilemap structure (mechanism)
	- Free tilemap structure (mechanism)
	- Load in the tilemaps into the driver
	- Saving of tilemap graphics
		- Save tilemap(s)
		- Save graphics bank with crosshatch in sprites
	- Loading of tilemap graphics
		- Load graphics bank (as now)
		- Load tilemap(s)



----------------------------
Fri Apr 11 17:03:40 EDT 2003

    AUGH.  stupid dos.  fopen( filename, "rb" ) != fopen( filename, "r" )
    Bug 10 fixed.  grmbmrmbbbmmrrrr.



----------------------------
Fri Apr 11 16:01:49 EDT 2003

    Tilemap Policies:

	When importing/exporting tilemaps, you also need to import and
	export the remainder of that graphics bank, so that it can be
	reconstructed properly.

	Perhaps all tilemaps will have to be exported simultaneously?

	Gray out the sprites used in the tilemap in the base file.
	Both (all?) are needed to rebuild the roms.


    DOS Bug:

	It seems as though the lower bits are all okay, but its the
	upper bits that are getting munged?



----------------------------
Fri Apr 11 15:11:55 EDT 2003

    Just got it building properly on linux again.  There was an issue
    with isspace() not reporting whitespace properly. *shrug*  I added
    in a few extra cases here and there, and it works fine again.

    I really thought that this would have been the cause (somehow) of
    the DOS port not working properly.  But that is not the case.  DOS
    version still outputs garbage.  Grrr.



----------------------------
Thu Apr 10 22:27:45 EDT 2003

    Just put in the modification for reducing down the filename
    size.  instead of "pacmanbl" it's now just "pac" for filenames.
    (Up to the first three letters of the game/driver name.)

    Also, all of the default filenames are now changed to:

    NAM_1.pcx		bank 1 image
    NAM_1c.pcx		bank 1 checkerboard
    NAM_p1.pcx		palette 1 dump

    ... hrm... although you should never see a PCX palette key image. heh.

    And I can't currently build this properly under Linux for some
    reason.  I feel like this is probably related to BUG 10, but
    I'm not sure.



----------------------------
Wed Apr  9 17:04:20 EDT 2003

    Trying to track down the tapper decode bug.  (BUG 10)

    It is reproducable within VirtualPC, which is good.  I'm
    currently thinking it might be an endian problem. I need to
    test the current source over on Linux to tell for certain.

    Other than that, it could be a malloc problem or something.

    Or perhaps a counter getting out of range?



----------------------------
Tue Apr  8 14:51:34 EDT 2003

    Proposed Tilemap format (for the INI file)

    [Tilemap]		# [Layout]?
    Tilemaps=2
    
    [Tilemap1]
    Name=Namco text
    Description=the namco text logo for Pac-Man
    Credit=Jerry (optional)
    Width=5
    Height=1
    Bank=Decode1
    Row1=	10	11	12	13	14
    
    [Tilemap2]
    Name=Midway Logo
    Description=The midway logo bitmap for Ms Pacman
    Width=3
    Height=2
    Bank=Decode1
    Row1=	10	11	12
    Row2=	13	14	15

    [Tilemap3]
    Name=Basic Dump Layout
    Description= This is what gets dumped out anyway.
    Width=16
    Height=4
    Bank=Decode2
    Row1=  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
    Row2= 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
    Row3= 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    Row4= 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63

	I think that I actually can do this by the end of the week
	for 0.8 and just have it in there as a surprise gift.

	Be sure to HEAVILY note that the ordering is for reference
	and the bottom-rightmost version of the tile will be what
	gets put into the bank.

    And then for Palette/Colormap roms:

    [ColorRoms]
    Rom1= 0   256   16x32.m1

    [ColorMapRoms]
    Rom1= 0   512   16x64.m3

    [ColorLayout1]
    BaseColor = 0
    BaseColorMap = 0
    BitsPerEntry = 8
    RedBits = 0x30
    GreenBits = 0xC0
    BlueBits = 0x03
    BitsPerIndex = 8
    MapIndexMask = 0x0f
    Colors = 8
    ColorsPerMap = 4
    ColorMaps = 16



----------------------------
Tue Apr  8 12:32:49 EDT 2003

    Checked in all of the files again, finally.  YAY!
    Fixed BUG06.

    I'm moving the bugs/issues out into another file called "knownbugs.txt"



----------------------------
Tue Apr  8 01:14:15 EDT 2003

    Got rid of the 'alternate' crap.

    the 'force all graphics roms to load' code is in turaco.c look
    for "CRAFTYBUTFLAWEDROMCHECK"



----------------------------
Mon Apr  7 22:28:27 EDT 2003

    Tracking down the Tapper/DOS bug right now.

    Also just found a bug with bank 2 of the tapper driver.  Grrr.

    BUG06: When an old driver is used, and the DriverName is not specified,
	 or -ini is used, the driver name is "undefined"

    ALTERNATE_* stuff put in, but it's not needed anywhere, so it's
    been ifdef'ed out.

    I now force all graphics roms to be loaded for all banks, which
    fixed the tapper bank 2 load bug.  My 'isNeeded' routine was
    flawed.  Oops.

    I now also autoscale the palette such that old 0..63 palettes
    are scaled up to 0..255 if they're dimmer than a BRIGHTNESS_HEURISTIC

    BUG05: if a non-correct multiple is used for the width, it segfaults.
	 ie  -wid 11  **FIXED** (I think)



----------------------------
Mon Apr  7 01:24:18 EDT 2003

    After integrating that all around, I think I need a flag in
    the params structure (?) that says whether the image format
    selected is a paletted format or a truecolor format.  right
    now there are a bunch of checks throughout the code (game/turaco.c
    primarilly) that compare with ff_PCX.  If i put in another file
    format, these will not work properly anymore.



----------------------------
Mon Apr  7 00:48:06 EDT 2003

    We should query the saver/loader modules to get file extension.
    It's hacked into params.c now.



----------------------------
Sun Apr  6 22:08:06 EDT 2003

    The ice storm wiped out Zendragon.com, so I can't check in 
    any of my files.

    I finished up PCX loading, and I'm about to finish up PCX
    saving.  I abstracted out some of the load/save routines, such
    that each file format supported should have the following hooks:

	void FMT_Save( char * filename, IMAGE * image );

	IMAGE * FMT_Load( char * filename );

	FileFormat FMT_SupportedFile( char * filename );

	int FMT_Query( void );

    And an enum needs to be added into the ls.h file for the
    Supported function.

    There are issues with this currently, but it works okay for
    now.  Issues include:

	just because a format is capable of paletted mode, how does
	it know to save in that way?

	my "IMAGE" structure should deal better with paletted images
	rather than the hack that is there now.

	It wasn't thought out very well... It needs a good re-thinking.

    I can fix all of this to be done right, but I think it'll wait
    until 0.10 at least... once I've figured out how to do it
    properly.

    Also; the two palette structures in the PCX structure are
    inconsistant with eachother.

    I think I need to break the IMAGE Structure out into a paletted
    and truecolor image, then provide functions to convert between
    the two.



----------------------------
Sun Mar 30 22:14:22 EST 2003

    Working on re-arranging the source tree to make this easier to
    add more file format importers and exporters in the future. :D

    I twiddled around the CVS tree to get everything in the right
    place without losing the changelogs.



----------------------------
Sun Mar 30 21:03:25 EST 2003

    Aaah. the wonderful world of DOS support.

    Requested features:
	In/Output to PCX
	    - probably easy
	    - gotta re-learn the file format.  whee!
		
	In/Output to PNG
	    - probably a pain in the ass.
	    - have to deal with possibly compressed, RGB images. NO!



----------------------------
Sun Mar 30 16:16:48 EST 2003   == 0.6 release ==  (revision 1.0)

    DOS port notes:

    MAKEFILE
	makefile filename was bad
		changed to "Makefile"

	"uname" does not exist
		set to "MSDOS"

    src/ini/jstr.c:119
	strtok_r unknown
		changed to strtok instead

    src/game/turaco.c:102
	snprintf
		#ifdef'ed around to use "sprintf"  :(



----------------------------
Sat Mar 29 15:43:41 EST 2003

    After screwing around with Unreal Tournament bots for my GameAI
    class, I think I'm ready to dive back into Pac hacking here.
    I've been thinking about writing a bit for it that imports and
    exports palette roms.  Although, I'm not entirely sure it's
    necessary.  I've also been considering a completely seperate
    program that will read in/write out binary files as csv,
    formatted text, asm source, c source, flat text hexdump, etc.



----------------------------
Thu Mar 27 12:09:33 EST 2003

    Damnit.  The FRAC crap in MAME requires the Machine to be
    initialized.  That's going to significantly slow down the driver
    dumper.  And thanks to that brilliant code design, I'm  gonna
    throw the MAME dumper on back burner again.

	Grrr, argh.

    Although, I should put in a dumper for the Genroms roms-file
    format into there as well.  That might make things easier for
    some people.  Eh.  whatever.



----------------------------
Thu Mar 27 00:30:19 EST 2003

    character numbers put into the checkerboard generator. *FROSTING 01*



----------------------------
Fri Mar 21 22:22:50 EST 2003

    Rom filesize check added (BUG02)



----------------------------
Fri Mar 21 19:21:19 EST 2003

    Trying to figure out what info gets stored into the magic pixel
    line atop the ubercheckerboard file:

	version number
	magic pixel height

	seperator height
	seperator width
	sprite width
	sprite height
	nsprites wide

	palette pixel width
	palette pixel height
	palette ncolors horiz
	palette ncolors total



----------------------------
Thu Mar 20 11:13:33 EST 2003

    Came up with a new idea for the rom bank output file that
    eliminates the need for the checkerboard file as well as the
    color key file.  It started out as simply a framed bank output
    file, but it has grown significantly.

    It contains a nicely layed out grid containing all of the sprites,
    a color key, and the checkerboard key.  there is also a magic row
    of pixels at the top which really is the description of the layout
    of the file.

    === Other features to add ===

	- Select which sprite numbers/ranges are from which files. 

	    So that you can draw an image in an old format bank
	    file, while having the regular characters coming from a
	    framed checkerboard file.  (To make doing banks with
		characters and  megagraphics easy)



----------------------------
Wed Mar 19 18:05:28 EST 2003

    Agh.  Pengo drivers depend on the stupid FRAC crap in MAME.
    I've gotta figure that out and regenerate drivers for it before
    I use the driver merger, which I haven't written yet. heh.

    Earlier today, I released a bunch of 16x16 starter sets too.

    === 0.6 will have ===

	- Proper Rom searcher *BUG 01*

	    The current rom searcher just goes with the first rom
	    it finds, rather than one in the proper directory.


	- ROM reader size check *BUG 02*
		]]DONE[[

	    If the rom is too big (compared to the defined size)
	    stop loading it.  Amount of rom loaded should be
	    determined by the driver, since that's what allocation
	    is based on, rather than the ROM file size.


	- get/set bit routine should check range of the buffer too. *BUG 03*

	    out of bounds bug.


	- track down the x/y offsets inconsistancy bug *BUG 04*

	    if they are inconsistant with the romsize, things go awry


	- Checkerboard Key *FROSTING 01*
		]]DONE[[

	    Display the ascii value and/or hex value for each
	    element in the checkerboard itself at 50% gray.

	    *** possibly replaced by the ubercheckerboard file ***


	- Romname retarget on load *FROSTING 02*

	    For banks that require a single rom (and you know this)
	    a command line option to change the name of the rom
	    needed.  This would have been hella-handy when importing
	    the fonts, where the bank info was always the same,
	    but the filename kept changing.


	- Retarget key colors *FROSTING 03*

	    Swap color X with color Y as it is loaded in, etc.


	- Driver -1 and -2 for x, y and p offset *FROSTING 04*

	    Sets the bit on or off all the time for that position.
	    

    === Non-Core Software to-do ===

	- MAME dump FRAC support *NC 01*

	- Driver combiner *NC 02*

	- Amiga Bitmap Font uncompressor *NC 03*

	+ Put the original zips to the DOS fonts and editor on the web 



----------------------------
Wed Mar 19 01:08:01 EST 2003

    Freakin duh.  I just made an INI driver to read in dos fonts.
    It doesn't quite work right with 8x16... i think that's a bug
    with Turaco CL itself, and not the driver.  I'll figure that
    out eventually.  I'm not sure that there are any games that
    use non-square sprites, but regardless, it should work fine.

    I'd like to add in a tiny (6pt?) font into the checkerboard
    routine, to drop in the hex value, or the ascii character or
    something into there.  I think it would be useful.

    Regardless, I threw a bunch of 8x8 starter sets up on the web
    page made from dos fonts.



----------------------------
Tue Mar 18 11:50:15 EST 2003 (Day 11)  == 0.4 release ==  (revision 1.0)

    I found oall of my old MS-DOS bitmap fonts for a dos font file
    generator.  I'll take all of the dos fonts I have, and convert them
    into 8x8 and 16x16 images to be imported into games.  Then people
    will have oodles of fonts to work with for their game, should they
    choose to use them.  I know I need a gothic/Garnet like font for my
    TROGDOR game. heheh.

    I also need to make a slight amendment to the MAME dumper before I
    will feel comfortable releasing this.  The current drivers WILL NOT
    work with the old Turaco... or at least they won't get rotated
    properly, so I need to move the 'orientation' bit down into the
    bank section.

    I'm also about to finish updating the README, then we'll be ready
    for a release!


    So, the current gameplan is this:

	+ update the README
	+ update INIDRIV.txt
	+ move the drivers out into their own project
	+ update the MAME dumper, and re-dump out all 3071 games
	    - 3036 games now. (removed 0-bank drivers (zsnes))
	+ Drop a 1.0 release
	_ ???
	_ Profit

	concurrently:
    
	_ write the DOSFONT-PNM converter (in perl? simple c?)
	_ release the fonts (along with their original .zip files)
	_ write the AmigaFont-PNM converter (c?)
	- make a secondary release of this

    At the end of this, I should have three CVS heirarchies:

	turacoCL   - the main program
	CL_Drivers - the 3071 drivers, eventually integrated with the old
	CL_fonts   - the converted DOS and Amiga fonts



----------------------------
Tue Mar 18 01:56:19 EST 2003 (Day 11)

    Oh yeah... that works.  Just made the first version of the
    quadblok graphics using photoshop.  YAY!  Think I'm gonna switch
    to the color prom that Dave uses for his hacks, and see if it's
    more flexible.

    Time to update the README and drop a release.  I'll merge in
    the old drivers later on.



----------------------------
Mon Mar 17 17:48:21 EST 2003 (Day 10)

    Migrated everything over to use the new methods.  It seems to work
    well for now.  I got rid of the 6 bit color support, and instead
    went right to 8 bit for everything, and thus remvoed the -256
    option.

    I also got 3071 drivers from xMAME 0.65.1 ported over.  I still
    need to merge the old Turaco drivers with these to give us the 
    new palettes and such. 

    directories named 'cvs' + non-case-sensitive filesystems = BAD


    --------------------------
                 Current to-do

	X Add in the orientation handling

	X Test the PNM->ROM handling

	X Test everything else!

	- Merge the old Turaco drivers into the new Turaco CL drivers

	- Update the README.txt file

	- Release revision 1.0!



----------------------------
Mon Mar 17 14:50:47 EST 2003 (Day 10)

    The new processes, based on current code and the new command line
    params: (Preliminary)

    + Create instance
    + Acquire Environment Variables
    + Acquire Command Line Args

    + Validate Command Line Args
	-drv  or  -ini required
	-inf PNM  or  -inf ROM  required 

	-trom and $(TROM) is defined

    + if( -v or -h ) 
	Usage();  return;

    + if (-drv DriverName)
	find the ini file in the driver directory
	DRIVER = found;
    + else if (-ini)
	DRIVER = argument;

    + read in the DRIVER;

    + Validate bank-based arguments
	-bnk BankNumber is valid
	-pal PaletteNumber is valid
	-rom Directory exists
	-rod Directory exists
	if( -inf PNM )
	    color key image file exists
	    databank image file exists

    Determine the default names for romset, key, and checkerboard files
    if there were none defined. 
    //turaco_ConfigureFilenames( TuracoInstance * ti )

    if( -inf PNM )  # PNM to ROM
	Load Romset (backfill rom)
	load color key image
	load databank image
	encode rom
	save out roms

    if( -inf ROM )  # ROM to PNM
	Load Romset (backfill rom)
	decode roms
	save out color key
	save out databank
	save out checkerboard



----------------------------
Sun Mar 16 23:49:41 EST 2003 (Day 9)

    Get rid of the backfill.  Don't bother filling the image first.
    It's pointless.  AGH

    We need the backfill.  what if a bank starts in the middle of
    a rom?

    Command line options: (Preliminary)

Common options:
	-drv DriverName		search for the driver (in $(TDRIVERS) )

	-ini Driver.ini		use this particular driver
				[one of the above two is required]

	-inf ( PNM | ROM )	Input format: from a PNM or ROM
				[no default, required]

	-bnk BankNumber		Select the graphics bank
				DEFAULT:  bank 0
 
	-pal PaletteNumber	Select the palette to use
				DEFAULT:  non-driver palette

	-key Filename.pnm	override key filename
				DEFAULT:  "DRIVER_PAL_palkey.pnm"

	-rom Directory		search for roms in the directory chosen
				DEFAULT:  current directory

	-trom 			trigger ROMDIR search for rom files.
				(searches $(TROM) path)
				(same as -rom $(TROM) )

PNM -> ROM
	-rod Directory		Where the rom files get put
				DEFAULT:  current directory

ROM -> PNM
	-dbf File		override sprite image data name
				DEFAULT:  "DRIVER_BANK.pnm"

	-chk File		override checkerboard file name
				DEFAULT:  "DRIVER_BANK_chk.pnm"

	-256			set 8bit image output instead of 6
				DEFAULT:  6 bit output

	-wid Value		Number of sprites wide to make the image 
				DEFAULT:  32

    Unless -trom or -rom are chosen, the search for roms starts at
    the current working directory.



----------------------------
Sun Mar 16 21:46:49 EST 2003 (Day 9)

    Core segments written so far:
	- PPM saver  [ from the 'sp' project ]
	- PPM loader [ from the 'sp' project ]
	- INI reader [ new code ]
	- driver tree searcher
	- ARGV parser
	- INI parser
	- driver reader (using INI stuff)
	- ROM reader
	- ROM decoder (into paletted buffer via driver)
	- PNM writer (save Image generated from paletted image)
	- color key PNM writer
	- palette selector
	- PNM reader (with color key lookup image)
	- ROM writer 
	- ROM encoder (encode via driver)

    Core segments to write:
	- nothing! :D



----------------------------
Sun Mar 16 21:08:19 EST 2003 (Day 9)

    I am officially on crack.  There is no issue with image files
    generated in Photoshop.  They work just fine.  No hacks or
    modifications are needed.



----------------------------
Sun Mar 16 20:53:02 EST 2003 (Day 9)

    I just got exporting working right.  I made the mistake of
    using an un-touched key file, instead of piping it through the
    same program (xv) as my test program, so it wasn't loading
    properly.  XV scales everything up to [0..255] instead of the
    initial values of [0..63] which is what the key file was...
    which is why it didn't work at all.

    I also just found out that Photoshop saves screwed up binary
    PNM files.  I gotta figure that out... and see if they're doing
    it to spec, and I'm wrong... regardless, I've gotta put in a
    fix for it.  To exclude Photoshop would be moronic.

    Besides, my Binary PPM output routine might be wrong if Photoshop
    is correct, and just XV is lenient. heh.



----------------------------
Sun Mar 16 11:53:27 EST 2003 (Day 9)

    I think I'm gonna finish coding up the encoder, then perhaps
    go to the IHX generator (maybe?).  At that point, I'll release
    this as a beta 1.0 to freshmeat, and then fix the bank stuff.

    note:
	IHX checksum:  0x0100 - (sum of all bytes & 0x00ff)



----------------------------
Sat Mar 15 23:29:23 EST 2003 (Day 8)

    I've just really come to grips with a problem here.  How much
    of what the program uses is user defined, and how much is
    automatic?

    The user can specify a rom name on the command line, but what
    what happens if the bank they want to use is over multiple
    roms?

    I seriously have to reconsider how everything gets determined.

    Perhaps that the user specifies an output directory, and the
    roms get shoved into there, or the graphics files are named
    something like:

	pacman_bnk1.pnm
	pacman_bnk1_chk.pnm
	pacman_pal1.pnm

    Where the filenames are "ROMNAME_[pal|bank][number](_chk).pnm

    Then the roms are named as they are in the driver.  no retargetting
    the names... not yet anyway.

    The IHX encoder is gonna be a bit more of a pain in the butt
    than I had originally thought, so I removed it from the ROM
    save routine for now.  Perhaps I'll put it back in, but being
    that we don't read IHX files anyway, it might just make more
    sense to drop IHX support altogether...
   


----------------------------
Fri Mar 14 21:44:45 EST 2003 (Day 7)

    Added the checkerboard output.  Perhaps it'll be useful to
    someone. *shrug*

    I spent most of the day trying to get a MAME driver expoerter
    working, but I got it to the point where it started to dump
    out rom names, and now it crashes.  *grumble*  I need to just
    hand off what I want to someone on the MAME team, although it
    would be wicked cool to contribute this back, so that it is
    always in there.

    Think I'll work on the PNM->ROM encoder now.



----------------------------
Thu Mar 13 12:08:11 EST 2003 (Day 6)

    Palettes are wrong.  They're all hand-made, since at the time,
    there were no palettes in MAME when we made it; or at least
    nothing that worked out well.  I think one of the things I need
    to do for version 1.0 is to hack a version of MAME again (joy.)
    and make a new INI exporter and get the latest versions of all
    of the drivers.  I'm not particularly looking forward to doing
    this, but it will be the best way to do it.

    Perhaps I can get someone who has a working MAME build to add
    in the code.  Or perhaps I should do it myself and then send
    the code back over to them, and let it lie dormant in all future
    versions of MAME.  I can put in all sorts of other info, and
    actually extract a complete MAME INI driver from the source
    code, to be used by TotEM in the future. heh...



----------------------------
Thu Mar 13 01:41:32 EST 2003 (Day 6)

    First exports are working!  :D
	* load in correct rom
	* decode it into the alpha channel
	* convert the alpha into an RGB using the palette
	* save out the RGB to a PNM file
	* save out the RGB Key to a PNM file

    Corners Cut:
	- a few of the error checks in turaco.c and coding.c are incomplete.
	- orientation flag is not checked at all



----------------------------
Tue Mar 11 12:10:47 EST 2003 (Day 4)

    A few issues:
	- do we require all roms to be there?  Should we cross-reference
	  the graphics bank to be loaded, and then only load/save the 
	  needed rom image files?
	- should we instead load in all of the graphics, do our modification
	  then save it out?  What if there are overlaying banks and the
	  user generates bank 0, then bank 1 in seperate calls,  does 
	  1 overwrite 0?  We should load in the roms first, then modify
	  then save them out, perhaps?

	    *A:  only work with one bank per instantiation! *

    Perhaps the proper process is to: 
	1. determine which "rom files" are needed.
	   (Rev A will just load all rom files in.  This should be fine.)
	2. load them into a local buffer.
	3. do (A), (B) or (C) below

	(A) PNG->ROM
	    encode the PNGs out to the ROM image, overlaying the image
	    save the ROM images back out to disk

	(B) ROM->PNG
	    decode the ROM image to the PNGs
    
	(C) ROM->IHX
	    save the ROM images back out to disk

    So, no matter what, we're loading in the graphics roms.  If a required
    rom does not exist, just leave that block of memory dry. (or filled with
    "Turaco CL by Jerry " or something... ;]  )

    -- NOTE from the future:  I'm really glad i put in the above text string
       since it helped me find a bug with the DOS stuff not loading in the
       ROM properly.  :D

    The complete process then is:
    1. traverse the rom entries in the driver, determining the upper bounds
    2. malloc that much ram as a ROM buffer
    3. fill the ROM buffer with "Turaco CL by Jerry "
    4. optional: determine which graphics roms are needed
    5. find and load in the graphics roms to the ROM buffer
    6. do (A), (B) or (C) above



----------------------------
Tue Mar 11 01:13:44 EST 2003 (Day 4)

    Whoot!  driver loading is done. it was tedious but easy. 



----------------------------
Mon Mar 10 22:32:50 EST 2003 (Day 3)
    
    argv processing. that was easy.
    driver loading next.



----------------------------
Mon Mar 10 17:51:15 EST 2003 (Day 3)

    Updated the list below, to add in the driver tree searcher.
    Also need to write an ARGV handler too.  Perhaps that's next?



----------------------------
Mon Mar 10 14:37:50 EST 2003 (Day 3)

    I completed my INI reader.  I deviated from the below design a
    little, and instead have the callbacks integrated into the code,
    since this will never really be used again.  I'm not even writing
    out INI files, so it's pretty pointless to make it too advanced.

    But now, I have a way to query strings, arrays, and integers... 
    basically, everything I need for this. 

    I've also figured out how I'm going to key off of the colors in a
    file. I'll basically save a "palette Key" along with each image
    saved which contains [0..ncolors] of squares of color which you can
    use in your paint program to choose the correct colors.

    Command Line Effects to add:
	- color swap (swap 0 with 2, etc) 



----------------------------
Fri Mar  7 17:34:23 EST 2003 (Day 0)

    The original code base SUCKS. HARD.  I think I'm just going to end
    up borrowing the decode/encode routine... not sure whether I'll use
    Ivan's original source or my optimized version, and write
    everything else from scratch.

    * INI Reader:
	Generic INI module, makes callbacks from
	    [section]
	    key  = valueA
	    key2 = valueB

	to
	    end( "lastsection" )
	    start( "section" )
	    item( "section/key", "valueA" )
	    item( "section/key2", "valueB" )
	much like pat+'s expat wrapper.
	It will never indirect more than one level down.

    * ROM Bitmap (en/de)coder
	Uses the parsed in INI file and a ROM file, and decodes
	the bank number into a ppm "IMAGE".  It then performs the
	'rotate' function on all items in the image space.
	only works on one bank at a time.

    * ROM Export routine
	Saves out as IHX files, or binary images.

    * PPM File Input / Output
	Loads / Saves out the above "IMAGE"


    Hrm.  This winds up being VERY modular:
    The processing pipeline:

	Source File -> decode -> process -> encode -> Destination File

    Source File / Decode:
	PPM	File loader
	ROM	INI decoder
	blank	generate 0's

    Process A:
	rotator
	user specified modifiers
	cycle colors

    Destination File / Encode
	PPM	File saver
	ROM	Unrotator/INI Encoder
	ROM	IHX Encoder

--------------------------------------------------------------------------------
$Id: notes.txt,v 1.70 2003/05/31 03:25:31 jerry Exp $
